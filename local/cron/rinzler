#!/usr/bin/python -u
#
# rinzler
#   check for updates in the repo, then load the build targets and dependancies into the database
#
import os

os.environ.setdefault( "DJANGO_SETTINGS_MODULE", "mcp.settings" )

import logging
import sys
import glob
import json
import shutil
from datetime import datetime
from logging.handlers import SysLogHandler

from django.utils.timezone import utc
from django.conf import settings
from mcp.Project.models import Project, Commit, Build, Package, BuildDependancy, BuildResource
from mcp.Resource.models import Resource
from mcp.lib.Makefile import Makefile
from mcp.lib.Git import Git
from mcp.lib.Slack import Slack

WORK_DIR = '/tmp/rinzler'
PID_FILE = '/var/run/rinzler.pid'

# when loading build targets, make sure the target name isn't reserved: 'lint', 'test', 'rpm', 'dpkg', 'respkg', 'resource', 'all', 'clean', '*-targets', '*-requires', '*-depends', '*-builds', 'target'

logging.basicConfig()
logger = logging.getLogger()
handler = SysLogHandler( address='/dev/log', facility=SysLogHandler.LOG_DAEMON )
handler.setFormatter( logging.Formatter( fmt='recognizer[%(process)d]: %(message)s' ) )
logger.addHandler( handler )
logging.info( 'Starting...' )
if '-v' in sys.argv:
  logger.setLevel( logging.DEBUG )

else:
  logger.setLevel( logging.INFO )

if os.path.exists( PID_FILE ):
  logging.error( 'pid file exists, bailing...' )
  sys.exit( 0 )

tmp = open( PID_FILE, 'w' )
tmp.write( '%s\n' % os.getpid() )
tmp.close()

slack = Slack( 'rinzler' )

def _makeBuild( build_name, project, manual ):
  dependancy_list = make.depends( build_name )
  resource_list = make.resources( build_name )
  logging.debug( 'Build: "%s" depends: "%s" resources: "%s".' % ( build_name, dependancy_list, resource_list ) )
  try:
    build = Build.objects.get( project=project, name=build_name ) # TODO: untill update stuff is in place, we shoudn't ever find it, but here for future and saftey, when it does exist
    for dependancy in build.dependancies.all(): #TODO: update instead of delete and re add
      dependancy.delete()

    for resource in build._resources.all():
      resource.delete()

  except Build.DoesNotExist:
    build = Build()
    build.name = build_name
    build.project = project
    build.manual = manual
    build.save()

  for dependancy in dependancy_list:
    ( package_name, state ) = dependancy.split( ':' )
    try:
      package = Package.objects.get( name=package_name )

    except Package.DoesNotExist:
      logging.warning( 'Package "%s" for dependancy for build "%s" does not exist, skipped.' % ( package_name, build_name ) )
      continue

    builddep = BuildDependancy()
    builddep.build = build
    builddep.package = package
    builddep.state = state
    builddep.save()

  for resource in resource_list:
    ( name, quanity, resource_name ) = resource.split( ':' )
    try:
      resource = Resource.objects.get( name=resource_name )

    except Resource.DoesNotExist:
      logging.error( 'Resource "%s" for build "%s" does not exist, killing the build.' % ( resource_name, build_name ) )
      build.delete()
      return

    buildres = BuildResource()
    buildres.build = build
    buildres.resource = resource
    buildres.name = name
    buildres.quanity = quanity
    buildres.save()


# where project dosen't have any auto builds nor queue items, nor manual builds in pre "ran" state, nor commit in flight
for project in Project.objects.filter( buildjob__isnull=True, queueitem__isnull=True ).order_by( '-last_checked' ):
  if project.name.startswith( '_' ):
    continue

  ready = True
  for commit in project.commit_set.all():
    ready &= commit.done_at is not None

  if not ready:
    continue

  logging.info( 'Checking project "%s"' % project.name )

  if not project.local_path:
    project.local_path = project.githubproject.github_url.replace( 'https://github.emcrubicon.com/', '' )
    path = os.path.join( settings.GIT_REPO_PATH, project.local_path )
    parent_path = '/'.join( path.split( '/' )[ :-1 ] )
    logging.debug( 'Creating "%s" for "%s"...' % ( parent_path, project.name ) )
    try:
      os.makedirs( parent_path )

    except OSError as e:
      if e.errno == 17: # allready exists
        pass

      else:
        raise e

    git = Git( path )
    git.setup( project.githubproject.github_url, parent_path )
    project.save()


  else:
    path = os.path.join( settings.GIT_REPO_PATH, project.local_path )
    logging.debug( 'Updating "%s" for "%s"...' % ( path, project.name ) )
    git = Git( path )

  git.update()

  branch_map = git.branch_map()

  logging.debug( 'Branches: "%s"' % branch_map )

  for branch in branch_map.keys():
    try:
      commit = Commit.objects.get( project=project, branch=branch, commit=branch_map[ branch ] )
      continue # allready there, don't need to worry about it
    except Commit.DoesNotExist:
      pass

    logging.info( 'New Commit "%s" on Branch "%s" of Project "%s"...' % ( branch_map[ branch ], branch, project.name ) )
    slack.post_message( 'New Commit "%s" on Branch "%s" of Project "%s".' % ( branch_map[ branch ], branch, project.name ), slack.INFO )
    git.checkout( WORK_DIR, branch )

    make = Makefile( glob.glob( '%s/*' % WORK_DIR )[0] )

    commit = Commit()
    commit.project = project
    commit.branch = branch
    commit.commit = branch_map[ branch ]
    distro_list = make.testDistros()
    commit.lint_results = json.dumps( dict( zip( distro_list, [{}] * len( distro_list ) ) ) )
    commit.test_results = commit.lint_results
    commit.build_results = {}

    if branch == 'master':
      logging.info( 'Adding Package Build...' )

      for tmp in ( 'dpkg', 'rpm', 'respkg', 'resource' ):
        distro_list = make.packageDistros( tmp )
        if distro_list:
          commit.build_results[ tmp ] = dict( zip( distro_list, [{}] * len( distro_list ) ) )

    commit.build_results = json.dumps( commit.build_results )
    commit.save()

    if branch == 'master':
      logging.info( 'Updating Builds info...' )
      for build in project.build_set.all(): #TODO: update what has changed, not delete everything and re-add everything
        build.delete()

      build_list = make.autoBuilds()
      logging.debug( 'Auto Builds "%s".' % build_list )
      for build in build_list:
        _makeBuild( build, project, False )

      build_list = make.manualBuilds()
      logging.debug( 'Manual Builds "%s".' % build_list )
      for build in build_list:
        _makeBuild( build, project, True )

    logging.debug( 'Cleaning up work dir.' )
    shutil.rmtree( WORK_DIR )

  project.last_checked = datetime.utcnow().replace( tzinfo=utc )
  project.save()

os.unlink( PID_FILE )
logging.info( 'Done!' )
logging.shutdown()
sys.exit( 0 )
