#!/usr/bin/python -u
import os

# TODO: rename sark

os.environ.setdefault( "DJANGO_SETTINGS_MODULE", "mcp.settings" )

import logging
import json
from datetime import datetime, timedelta

from django.utils.timezone import utc

from mcp.Processor.models import QueueItem, BuildJob
from mcp.Resources.models import Resource

CLEANUP_DELAY = 24

logging.basicConfig()
logging.getLogger().setLevel( logging.INFO )
logging.info( 'sark: Starting...' )

# Iterate over the Queued Items
for item in QueueItem.objects.all().order_by( 'priority' ): # start with the biggest number first
  # Check to see if resources are aviable
  status = item.checkResources()
  if status:
    logging.info( 'sark: Queue Item "%s" waiting for "%s"' % ( item, status ))
    item.resource_status = json.dumps( status )
    item.save()
    continue

  # Build a job
  job = BuildJob()
  job.manual = item.manual
  job.build = item.build
  job.git_url = item.git_url
  job.branch = item.branch
  job.target = item.target
  job.requires = item.requires
  job.save()

  # allocate the Resources
  resources = item.allocateResources( job )
  logging.info( 'sark: Starting Queue Item "%s" with Resources "%s" as job "%s"' % ( item, resources, job.id ) )
  job._resources = json.dumps( resources )
  job.save()

  # remove the queue Item
  item.delete()

# Iterate over the build new jobs
for job in BuildJob.objects.filter( built_at__isnull=True ):
  ready = True
  resource_map = job.resources
  for name in resource_map:
    for index in range( 0, len( resource_map[ name ] ) ):
      tmp = Resource.built( resource_map[ name ][ index ][ 'config' ] )
      ready &= tmp
      job.updateResourceState( name, index, 'Built' if tmp else 'Building' )

  # all done, set to built
  if ready:
    logging.info( 'sark: Setting job "%s" to Built.' % job.id )
    job.built_at = datetime.utcnow().replace( tzinfo=utc )
    job.save()

# Iterate over built jobs
for job in BuildJob.objects.filter( built_at__isnull=False, ran_at__isnull=True ):
  resource_map = job.resources
  ready = True
  for name in resource_map:
    for index in range( 0, len( resource_map[ name ] ) ):
      ready &= resource_map[ name ][ index ][ 'status' ] == 'Ran'

  # the resources have all run, set the job to ran
  if ready:
    logging.info( 'sark: Setting job "%s" to Ran.' % job.id )
    job.ran_at = datetime.utcnow().replace( tzinfo=utc )
    job.save()

# Iterate over the Ran jobs, and for now fake report them
for job in BuildJob.objects.filter( built_at__isnull=False, ran_at__isnull=False, reported_at__isnull=True ):
  logging.info( 'sark: Setting job "%s" to Reported.' % job.id )
  job.reported_at = datetime.utcnow().replace( tzinfo=utc )
  job.save()

# iterate over the Reported jobs that are not manual, and release the resources
for job in BuildJob.objects.filter( built_at__isnull=False, ran_at__isnull=False, reported_at__isnull=False, released_at__isnull=True, manual=False ):
  resource_map = job.resources
  for name in resource_map:
    for index in range( 0, len( resource_map[ name ] ) ):
      if resource_map[ name ][ index ][ 'status' ] not in ( 'Releasing', 'Released' ):
        logging.info( 'sark: Releasing resource "%s" "%s" of job "%s".' % ( name, index, job.id ) )
        Resource.release( resource_map[ name ][ index ][ 'config' ]  )
        job.updateResourceState( name, index, 'Releasing' )

# iterate over the Reported jobs and look to see if the resources are all released
for job in BuildJob.objects.filter( built_at__isnull=False, ran_at__isnull=False, reported_at__isnull=False, released_at__isnull=True ):
  resource_map = job.resources
  for name in resource_map:
    for index in range( 0, len( resource_map[ name ] ) ):
      if resource_map[ name ][ index ][ 'status' ] == 'Releasing':
        if Resource.released( resource_map[ name ][ index ][ 'config' ] ):
          job.updateResourceState( name, index, 'Released' )

  resource_map = job.resources
  ready = True
  for name in resource_map:
    for index in range( 0, len( resource_map[ name ] ) ):
      ready &= resource_map[ name ][ index ][ 'status' ] == 'Released'

  # resources all released, set job to released
  if ready:
    logging.info( 'sark: Setting job "%s" to Released.' % job.id )
    job.released_at = datetime.utcnow().replace( tzinfo=utc )
    job.save()

# Iterate over released jobs that are at least CLEANUP_DELAY hours old and delete them
for job in BuildJob.objects.filter( released_at__lt=( datetime.utcnow().replace( tzinfo=utc ) - timedelta( hours=CLEANUP_DELAY ) ) ):
  logging.info( 'sark: Cleaning up job "%s".' % job.id )
  job.delete()

logging.info( 'sark: Done!' )
logging.shutdown()
